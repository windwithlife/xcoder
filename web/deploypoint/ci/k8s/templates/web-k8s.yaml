
apiVersion:  apps/v1
kind: Deployment
metadata:
  name: <%=data.deploymentName%>
spec:
  replicas: 2
  selector:
    matchLabels:
      app: <%=data.applicationName%>
  template:
    metadata:
      labels:
        app: <%=data.applicationName%>
    spec:
      containers:
      - name: <%=data.applicationName%> 
        image: <%=data.imageName%>
        ports:
        - containerPort: 8080
        
        
       
---
apiVersion: v1
kind: Service
metadata:
  name: <%=data.serviceName%>
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: <%=data.applicationName%>
---

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: <%=data.certConfigName%> 
spec:
  dnsNames:
    - <%=data.domainName%>
  secretName: <%=data.certConfigName%> 
  issuerRef:
    name: letsencrypt
    kind: ClusterIssuer
---


apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: <%=data.ingressName%>
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "token,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "token"
    nginx.ingress.kubernetes.io/ssl-redirect: 'false' #http 自动转https
spec:
  ingressClassName: nginx
  tls:
  - secretName: <%=data.certConfigName%>
    hosts:
    - <%=data.domainName%>
  rules:
  - host: <%=data.domainName%>
    http:
      paths: <%data.routes.forEach(function(route){%>
      - path: <%=route.path%>
        pathType: Prefix
        backend:
          serviceName: <%=route.serviceName%>
          servicePort: 80<%});%>

